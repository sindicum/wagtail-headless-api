services:
  db:
    build: ./db
    container_name: wagtailheadlessapi_db_prod
    env_file: .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wagtailheadlessapi_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: wagtailheadlessapi_backend_prod
    command: gunicorn config.wsgi:application --config gunicorn.conf.py
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
      - logs_volume:/app/logs
    env_file: .env
    environment:
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - wagtailheadlessapi_network
    restart: always

  nginx:
    image: nginx:alpine
    container_name: wagtailheadlessapi_nginx_prod
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/app/static
      - media_volume:/app/media
      # - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - wagtailheadlessapi_network
    restart: always

volumes:
  postgres_data:
  static_volume:
  media_volume:
  logs_volume:

networks:
  wagtailheadlessapi_network:
    driver: bridge
